using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace XMLMapping
{
    public class SearchElements
    {
        public List<XElement> SearchList;
        private String Method;
        private String[] Params;

        public String getMethod()
        {
            return Method;
        }

        public String[] getParams()
        {
            return Params;
        }

        public SearchElements(List<XElement> mSearchList, String mMethod, String[] mParams)
        {
            SearchList = mSearchList;
            Method = mMethod;
            Params = mParams;
        }

    }

    public class SearchElement
    {
        public XElement searchElement;

        public SearchElement(XElement element)
        {
            searchElement = element;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static string GetCurrentMethod()
        {
            StackTrace st = new StackTrace();
            StackFrame sf = st.GetFrame(1);

            return sf.GetMethod().Name;
        }
    }

    public class HelperUtility
    {
        public static XElement xmlFile = null;
        public SaveOptions Format;


        [MethodImpl(MethodImplOptions.NoInlining)]
        public static string GetCurrentMethod()
        {
            StackTrace st = new StackTrace();
            StackFrame sf = st.GetFrame(1);

            return sf.GetMethod().Name;
        }

        public void LoadFile(String filePath)
        {

            xmlFile = XElement.Load(filePath);
        }

        public HelperUtility() { }

        public HelperUtility(String filePath)
        {
            xmlFile = XElement.Load(filePath);
        }

        public void SaveFile(String path)
        {
            xmlFile.Save(path, Format);
        }


        public void SetFormatting(SaveOptions sopts)
        {
            Format = sopts;
        }

        /// <summary>
        /// Copies attribute from Node Name A to B with corresponding value
        /// </summary>
        /// <param name="SourceElementName"></param>
        /// <param name="DestinationElementName"></param>
        /// <param name="AttributeName"></param>
        /// <param name="TraverseAttrSource"></param>
        /// <param name="TraverseAttrDestination"></param>
        public void CopyAttributeByRel(String AttributeName, String SourceElementName, String DestinationElementName, String TraverseAttrSource, String TraverseAttrDestination)
        {
            String[] Params = { AttributeName, SourceElementName, DestinationElementName, TraverseAttrSource, TraverseAttrDestination };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod() + "(" + string.Join(",", Params) + ")'>");

            var result = GetElementsBy(SourceElementName).SearchList;
            if (result.Count() == 0)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + SourceElementName + "] in the xml document." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }

            foreach (XElement el in result)
            {
                XAttribute att = el.Attribute(AttributeName);
                if (att == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + AttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }
                XAttribute travSource = el.Attribute(TraverseAttrSource);
                if (travSource == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + TraverseAttrSource + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }
                XElement mEl = GetSingleElementByAttrID(DestinationElementName, TraverseAttrDestination, travSource.Value);
                if (mEl == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + TraverseAttrDestination + "] on node [" + DestinationElementName + "] with Value + [" + travSource.Value + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }

                mEl.SetAttributeValue(AttributeName, att.Value);
            }

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        /// <summary>
        /// Retrieves set of nodes that match the criteria
        /// </summary>
        /// <param name="ElementName">Specifies Node Name to use in query</param>
        /// <param name="AttributeName">Of the Node that is specified, searches it Attributes by AttributeName</param>
        /// <param name="Value">Compares the Attribute Value with the value used</param>
        /// <example><![CDATA[<Item object_type="Production"]]></example>
        public SearchElements GetElementsBy(String ElementName, String AttributeName, String Value)
        {
            String[] Params = { ElementName, AttributeName, Value };


            IEnumerable<XElement> list1 =
                  from el in xmlFile.Descendants()
                  where el.Name.LocalName.Equals(ElementName) &&
                    el.Attribute(AttributeName).Value == Value
                  select el;

            return new SearchElements(list1.ToList<XElement>(), GetCurrentMethod(), Params);

        }

        /// <summary>
        /// Retrieves set of nodes that match the criteria
        /// </summary>
        /// <param name="ObjectName">>Specifies Node Name to use in query</param>
        public SearchElements GetElementsBy(String ElementName)
        {
            String[] Params = { ElementName };
            IEnumerable<XElement> list1 =
                  from el in xmlFile.Descendants()
                  where el.Name.LocalName.Equals(ElementName)
                  select el;

            return new SearchElements(list1.ToList<XElement>(), GetCurrentMethod(), Params);

        }

        public SearchElement GetSingleElementByID(String UID)
        {
            XElement xEl = xmlFile.Descendants().Single(x => x.Attribute("elemId").Value == UID);


            return new SearchElement(xEl);

        }

        public XElement GetSingleElementByAttrID(String ElementName, String AttributeName, String Value)
        {
            IEnumerable<XElement> list1 = null;

            list1 =
               from el in xmlFile.Descendants()
               where el.Name.LocalName.Equals(ElementName) &&
                 el.Attribute(AttributeName) != null &&
                 el.Attribute(AttributeName).Value == Value
               select el;

            if (list1.Count() == 0)
                return null;
            else
                return list1.First();

        }
    }


    //************************ EXTENSION METHODS***********************************//
    static class Extensions
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        public static string GetCurrentMethod(SearchElements s, String[] Params)
        {
            StackTrace st = new StackTrace();
            StackFrame sf = st.GetFrame(1);
            string joined = s.getMethod() + "(" + string.Join(",", s.getParams()) + ").";
            joined += sf.GetMethod().Name + "(" + string.Join(",", Params) + ")";
            return joined;
        }

        /// <summary>
        /// Changes attribute value text to upper case
        /// </summary>
        /// <param name="AttributeName">The attribute to use</param>
        /// <returns></returns>
        public static void ToUpperValue(this SearchElements source, String AttributeName)
        {
            String[] Params = { AttributeName };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }

            foreach (XElement el in source.SearchList)
            {
                XAttribute att = el.Attribute(AttributeName);

                if (att == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + AttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }
                att.SetValue(el.Attribute(AttributeName).Value.ToUpper());
            }

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        /// <summary>
        /// Changes Attribute Value text to lower case.
        /// </summary>
        /// <param name="AttributeName">The Attribute to use</param>
        /// <returns></returns>
        public static void ToLowerValue(this SearchElements source, String AttributeName)
        {
            String[] Params = { AttributeName };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }

            foreach (XElement el in source.SearchList)
            {
                XAttribute att = el.Attribute(AttributeName);

                if (att == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + AttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }
                att.SetValue(el.Attribute(AttributeName).Value.ToLower());
            }

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        /// <summary>
        /// Adds Attribute to element
        /// </summary>
        /// <param name="AttributeName">The attribute to use</param>
        /// <param name="Value">The value of the attribute</param>
        public static void AddAttribute(this SearchElements source, String AttributeName, String Value)
        {
            String[] Params = { AttributeName, Value };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");
            foreach (XElement el in source.SearchList)
            {
                el.SetAttributeValue(AttributeName, Value);
            }

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        public static void AddAttribute(this SearchElements source, XElement el, String AttributeName, String Value)
        {
            String[] Params = { AttributeName, Value };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            el.SetAttributeValue(AttributeName, Value);

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        /// <summary>
        /// Removes the attribute from the Element
        /// </summary>
        /// <param name="AttributeName">The Name of the attribute</param>
        public static void RemoveAttribute(this SearchElements source, String AttributeName)
        {
            String[] Params = { AttributeName };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");


            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Comment>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document. No action taken." + "</Message>");
                Console.WriteLine("</Comment>");
            }

            foreach (XElement el in source.SearchList)
            {
                XAttribute att = el.Attribute(AttributeName);

                if (att == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + AttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }
                att.Remove();
            }


            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        public static void RemoveAttribute(this SearchElements source, XElement el, String AttributeName)
        {
            String[] Params = { AttributeName };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");


            XAttribute att = el.Attribute(AttributeName);

            if (att == null)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "Attribute [" + AttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }
            att.Remove();

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        public static void RenameAttribute(this SearchElements source, String OldAttributeName, String NewAttributeName)
        {
            String[] Params = { OldAttributeName, NewAttributeName };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }

            foreach (XElement el in source.SearchList)
            {
                XAttribute att = el.Attribute(OldAttributeName);

                if (att == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + OldAttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }
                String oldValue = att.Value;
                AddAttribute(source, el, NewAttributeName, oldValue);
                RemoveAttribute(source, el, OldAttributeName);
            }

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        public static void RenameNodes(this SearchElements source, String NewNodeName)
        {
            String[] Params = { NewNodeName };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }

            foreach (XElement el in source.SearchList)
            {
               el.Name = el.Parent.GetDefaultNamespace() + NewNodeName;
            }


            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        public static void RemoveNodes(this SearchElements source)
        {
            String[] Params = {""};
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Error>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document." + "</Message>");
                Console.WriteLine("</Error>");
                Console.WriteLine("</Sequence>");
                return;
            }

            foreach (XElement el in source.SearchList)
            {
                el.Remove();
            }

            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }

        /// <summary>
        /// Trims the attribute to a specified length.
        /// </summary>
        /// <param name="AttributeName">Name of the Attribute to Trim</param>
        /// <param name="Length">the max length of the attribute</param>
        public static void TrimAttributeLength(this SearchElements source, String AttributeName, byte Length)
        {
            String[] Params = { AttributeName,Length.ToString() };
            Console.WriteLine("<Sequence method='" + GetCurrentMethod(source, Params) + "'>");

            if (source.SearchList.Count() == 0)
            {
                Console.WriteLine("<Comment>");
                Console.WriteLine("<Message>" + "There are no nodes named [" + source.getParams()[0] + "] in the xml document. No action taken." + "</Message>");
                Console.WriteLine("</Comment>");
            }

            foreach (XElement el in source.SearchList)
            {
                XAttribute att = el.Attribute(AttributeName);

                if (att == null)
                {
                    Console.WriteLine("<Error>");
                    Console.WriteLine("<Message>" + "Attribute [" + AttributeName + "] on node [" + el.Name.LocalName + "] does not exist." + "</Message>");
                    Console.WriteLine("</Error>");
                    Console.WriteLine("</Sequence>");
                    return;
                }

                if (att.Value.Length >= Length)
                {
                    att.Value = att.Value.Substring(0, Length);
                }
            }


            Console.WriteLine("<completed/>");
            Console.WriteLine("</Sequence>");
        }
    }
}

